swagger: '2.0'
info:
  description: An open-source API for embedding those tough scientific computations in your application with ease. Scientific formulas and relationships have been developed and implemented, let's not repeat that work every time we want to create a science-based application! This is for researchers, educators and developers.
  version: "1.0.1"
  title: SCiAPI
  # put the contact info for your development or API team
  contact:
    email: marcusedwards@hotmail.ca

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# all paths will be relative to the basePath specified
# basePath: /v1

# tags are used for organizing operations
tags:
- name: developers
  description: Operations available to all developers
schemes:
- https
paths:
  /request/{Function_Name}:
    post:
      tags:
      - developers
      summary: request computation
      operationId: request
      description: |
        By passing the name of a computational function in SCiAPI's database, you can retrieve the computational function and its associated visual widget.
      produces:
      - application/json
      parameters:
      - in: path
        name: Function_Name
        description: Required to retrieve a function
        required: true
        type: string
      - in: body
        name: params
        description: API access key and parameters for computation.
        schema:
          $ref: '#/definitions/paramsObject'
      responses:
        200:
          description: computation object returned in response to successful request.
          schema:
            $ref: '#/definitions/computationObject'
        400:
          description: The returned object will contain an explanation of the error in the bad request -- either bad post or query parameters.
          schema:
            $ref: '#/definitions/computationObject'
        404:
         description: The returned object will contain a meassge explaining that the requested computation could not be found.
         schema:
            $ref: '#/definitions/computationObject'  
  /list:
    post:
      tags:
        - developers
      summary: request all computations' functions
      operationId: list
      description: |
        This path is used by the dynamic library to retrieve the computational function and their associated JavaScript functions.
      produces:
      - application/json
      parameters:
      - in: body
        name: params
        description: API access key and parameters for computation.
        schema:
          $ref: '#/definitions/basicParamsObject'
      responses:
        200:
          description: List of computation functions returned in response to successful request.
          schema:
            $ref: '#/definitions/listObject'
        400:
          description: The returned object will contain an explanation of the error in the bad request -- either bad post or query parameters.
          schema:
            $ref: '#/definitions/listObject'
definitions:
  basicParamsObject:
    type: object
    required: 
    - _api_key
    properties:
      _api_key:
        type: string
        description: Mandatory API key. API keys can be acquired through the site sciapi.herokuapp.com.
  paramsObject:
    type: object
    required: 
    - _api_key
    properties:
      _api_key:
        type: string
        description: Mandatory API key. API keys can be acquired through the site sciapi.herokuapp.com.
      param_name:
        type: number
        description: Optional parameter values. Without parameters, we will give you the code to perform the operation. With parameters, we will also insert the parameters into the code.
  listObject:
    type: object
    required: 
    - status
    - message
    - code
    properties:
      status:
        type: string
        example: "success"
        description: The status of the request.
      message:
        type: string
        example: "successfully requested all functions."
        description: Feedback from the API, including any errors and suggestions.
      code:
        type: string
        example: 
          '{"Angular Work":"function angularWork(final_e,initial_e){ var work = final_e - initial_e; return work; }", { ... } , }'
        description: An JSON object conatining the JavaScript function definitions for each computation in the database, indexed by the computation names. 
  computationObject:
    type: object
    required:
    - status
    - message
    - widget
    - code
    properties:
      status: 
        type: string
        example: "success"
        description: The status of the request.
      message: 
        type: string
        example: "successfully requested function Acceleration"
        description: Feedback from the API, including any errors and suggestions.
      widget:
        type: string
        description: "A rendered html widget containing the formula in text, JavaScript code, an associated Wolfram Alpha widget and a related photograph."
      code:
        type: string
        example: 
          "function Acceleration(v_1,v_2,time){
            var accel = (v_2 - v_1)/time;
            return accel;
          }"
        description: The JavaScript code that performs the computation. The code will be populated with any parameters provided with the request.  
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /MackEdweise/SCiAPI/1.0.0